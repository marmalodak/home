I Want to Remember
==================
:description: Q&A with myself, that is, I look up something useful and then forget about it until I need it again
:max-width: 100%
:nofooter:
:!version-label:
:icons: font
:listing-caption: Listing
:source-highlighter: pygments
:!sectlinks:
:copycss:
// :stylesheet: asciidoc-template.css


== TIL

=== zsh

==== zsh flags

`man zshoptions`

`set -e` is the same as `setopt ERR_EXIT` and the same as `set -o ERR_EXIT`

`set +e` is the same as `unsetopt ERR_EXIT` and the same as `setopt NO_ERR_EXIT`

https://linux.die.net/man/1/zshoptions[zsh man page] and https://zsh.sourceforge.io/Doc/Release/Options.html[zsh options]

.case insensitive and underscores are ignored
[%autowidth]
|===
|Single Letter|Full Word| Explanation

|`-e`
|`ERR_EXIT`
|If a command has a non-zero exit status, execute the ZERR trap, if set, and exit. This is disabled while running initialization scripts...

|`-u`
|`UNSET`
|Treat unset parameters as if they were empty when substituting. Otherwise they are treated as an error

|`-x`
|`XTRACE`
|Print commands and their arguments as they are executed

|
|`PIPE_FAIL`
|By default, when a pipeline exits the exit status recorded by the shell and returned by the shell variable $? reflects that of the rightmost element of a pipeline. If this option is set, the exit status instead reflects the status of the rightmost element of the pipeline that was non-zero, or zero if all elements exited with zero status

|
|`ERR_RETURN`
|If a command has a non-zero exit status, return immediately from the enclosing function. The logic is identical to that for ERR_EXIT, except that an implicit return statement is executed instead of an exit. This will trigger an exit at the outermost level of a non-interactive script

|`-G`
|`NULL_GLOB`
|If numeric filenames are matched by a filename generation pattern, sort the filenames numerically rather than lexicographically

|`C`
|`CSH_NULL_GLOB`
|If a pattern for filename generation has no matches, delete the pattern from the argument list; do not report an error unless all the patterns in a command have no matches. Overrides NOMATCH
|===


==== join a zsh array

```
zsh array join: a=( a b c d ); echo ${(j|,|)a}
```

https://www.arp242.net/why-zsh.html[s/bash/zsh/g] is great, I learned about it from https://news.ycombinator.com/item?id=28927966[hacker news]


==== zsh indirect dereference

Indirect dereference
```
‚ùØ foo=bar; bar=baz; echo ${foo}; echo ${(P)foo}
bar
baz
```


==== zsh quotes

Use either arrays or `${=FOO}` to get zsh to not insert quotes

See https://unix.stackexchange.com/questions/19530/expanding-variables-in-zsh[Splitting variables in ZSH]


=== Vim

==== Run a Python Script on Save

I don't use an IDE. I miss the feature that automatically run a Python program and show its output. I can mimic this in vim by using `autocmd` and opening the output file in a separate window.
The window with the output should both enable `autoread` and run `autocmd CursorHold * checktime`.

.Example, this is `log2sheet`, run it on save, see line 26 onwards
[source,python,linenums]
----
#!/usr/bin/env python3

import re


data = '''
 foo=1 baz=2 bar=3
 foo=2
 foo=3 baz=3 bar=4
'''.strip().split('\n')


m = re.compile(r'^.*foo=(?P<foo>\d*).*bar=(?P<bar>\d*).*')

for d in data:
  print(d)
  if (foobar := m.match(d)):
    print(f'foo={foobar["foo"]} bar={foobar["bar"]}')
  else:
    print("no matches")

print("done")

# yank from function! to autocmd!, i.e. lines 27 to 30
# :@"
comment = '''
function! Run_prog()
  silent! execute '!log2sheet-venv/bin/python3 ' . expand('%') . ' > ' . expand('%') . '.out' . ' 2>&1'
endfunction
autocmd! BufWritePost,FileWritePost expand('%') :call Run_prog()

in the log2sheet.out window:
:set autoread
:autocmd CursorHold * checktime
'''
----

==== delete n lines after a search result

In Vim, search for a term and then delete it and the 6 consecutive lines after

.https://vi.stackexchange.com/questions/8504/how-to-delete-searched-line-and-next[Delete searched line and next]
[CODE]
-----
:g/^some-long-search-term.*/.,.+6d
-----

==== Everything Else

https://www.youtube.com/watch?v=oQB8lYUZtrY[3 Levels of Vim Refactoring]


=== Mac

==== Create Bootable Monterey ISO in bash

.https://gist.github.com/julianxhokaxhiu/d26a8974eb0d723285c6b06c99d7207e[Simple bash script to create a Bootable ISO from macOS Monterey Install Image from Mac App Store]
[CODE]
-----
#!/usr/bin/env bash
#===========================================================================
# Works only with the official image available in the Mac App Store.
# Make sure you download the official installer before running this script.
#===========================================================================

# Change this at your desire. Sometimes this works out of the box, sometimes not.
# Default size: ~16 GB
DISK_SIZE="15361m"

#===========================================================================

hdiutil create -o /tmp/Monterey.cdr -size $DISK_SIZE -layout SPUD -fs HFS+J
hdiutil attach /tmp/Monterey.cdr.dmg -noverify -mountpoint /Volumes/install_build
sudo "/Applications/Install macOS Monterey.app/Contents/Resources/createinstallmedia"  --volume /Volumes/install_build --nointeraction
hdiutil detach "/Volumes/Shared Support"
hdiutil detach "/Volumes/Install macOS Monterey"
hdiutil convert /tmp/Monterey.cdr.dmg -format UDTO -o /tmp/Monterey.iso
mv /tmp/Monterey.iso.cdr ~/Desktop/Monterey.iso
rm /tmp/Monterey.cdr.dmg
-----


=== Python

==== relative imports

https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time?rq=1[Relative imports for the billionth time] for the next time I need to do this


=== Ubuntu

I like Ubuntu "minimal". Do not `unminimize` though. Instead,

. nuke `/etc/dpkg/dpkgs.cfd.d/excludes`
. read `/usr/bin/unminimize` for nuggets like `dpkg-divert` and `dpkg --verify`
. `sudo apt install --reinstall man manpages manpages-posix man-db vim ...`
. `sudo mandb -c`
. maybe nuke entries in `/etc/update-motd.d/`

`unminimize` will install a lot, even snap.


=== VMWare

==== VSphere

===== VM Network Security

On a host with ESXi 8.0.3, it took me a while to find where to set the security policy (e.g. "Promiscuous mode", "Mac address changes", "Forged transmits") for the "VM Network".
In VCenter, start with the ESX, click "Configure", then under "Networking" select "Virtual switches", then select (in my case) "vSwitch0".
Then click the three vertical dots next to "VM Network" click "Edit Settings" and then "Security".

==== ESXi

===== Updating ESXi to a new version via CLI

. download zip file from vmware portal
. upload zip file to local storage on the esxi host
. on th esxi host, invoke:
```
esxcli software sources profile list -d /vmfs/volumes/datastore path where zip file is saved/VMware ESXI update.zip
```
* This will list two lines, choose the standard one in the left column
* Then the following, where <standard> is the copied and pasted from the previous step, and the -d path is the full path to the .zip
```
esxcli software profile update -p <-Standard> -d /vmfs/volumes/<zip file path>
```


===== Run `esxcli` Remotely

* https://www.nakivo.com/blog/most-useful-esxcli-esxi-shell-commands-vmware-environment/[esxcli can be installed and run from a remote host]


===== Portgroup, Private storage virtual switch, Private storage port group, vmk1

From the ESXi web page UI:

. create a virtual switch
.. `vmnic1`
. create a port group
. create a VMKernel NIC
.. `vmk1`
.. static, follow IP settings from previous ESXi host
.. enable all the things

Go to vcenter, mount storage


=== Other

==== Lenovo Secure Boot

* physical presence must be asserted in order to enable secure boot mode
** cannot be enabled via BMC, use `ipmitool`
** `ipmitool -H some-esx-host.somedomain.com -U localadmin -P 'S00p3rP4sw04rd' -I lanplus raw 0x3a 0x7d 0x01`
** `ipmitool -H some-esx-host.somedomain.com -U localadmin -P 'S00p3rP4sw04rd' -I lanplus raw 0x3a 0x7d` to check whether it is asserted or not
** `ipmitool -H some-esx-host.somedomain.com -U localadmin -P 'S00p3rP4sw04rd' -I lanplus raw 0x3a 0x7d 0x00` to de-assert
** https://support.lenovo.com/us/en/solutions/ht503964-toggling-of-tpm-12-and-20-can-only-be-done-using-hardware-physical-presence-lenovo-system-x3850-x6-x3950-x6[Toggle TPM 1.2 2.0 SR650]
** ipmi and ssh to the bmc are enabled from the BMC controller page, click on "BMC Configuration" in the menu on the left, then click the "Network" item that opened up, then look for "Service Enablement and Port Assignment"
