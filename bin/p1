#!/usr/bin/env python


#------------------------------------------------------------------------------
import os
import os.path
import sys
import codecs # for unicode
import locale
import optparse
import sets


#------------------------------------------------------------------------------
PLAWatermark = "PLP PLAYLIST\nVERSION 1.20\n"


#------------------------------------------------------------------------------
def MusicFilesGet( topdir ):
    filename_encoding = locale.getpreferredencoding()
    fileslist= []
    for i in os.listdir( topdir ):
        d = os.path.abspath( os.path.join( topdir, i ) )
        if os.path.isdir( d ):
            for j in MusicFilesGet( d ):
                if j:
                    try:
                        yield unicode( j, filename_encoding, 'ignore' )
                    except TypeError: # it's already a unicode objec5
                        yield j
                else:
                    continue
        elif os.path.isfile( d ):
            try:
                yield unicode( d, filename_encoding, 'ignore' )
            except TypeError: # it's already a unicode object
                yield d


#------------------------------------------------------------------------------
def SongFilesListWritePlainText( playlistname, musicfileslist ):
    playlistfilename = playlistname+".txt"
    codecs.open( playlistfilename, "wt", locale.getpreferredencoding() ).writelines( "\n".join( musicfileslist ) )
    print "Wrote: ", playlistfilename


#------------------------------------------------------------------------------
def SongFilesListWritePLA( playlistname, rootpath, newrootpath ):
    musicfileslist = [ i.strip() for i in file( playlistname, "rb" ).readlines() ]
    playlistname = playlistname.rstrip( ".txt" ) + ".pla"
    musicfileslist = [ RootPathFix(n,rootpath,newrootpath) for n in musicfileslist ]
    # change path separators to foreslash
    musicfileslist = [ "\\".join(i.split(os.path.sep)) for i in musicfileslist ]
    # prepend watermark to list of files
    musicfileslist = [unicode(i) for i in PLAWatermark.split( "\n" )]+[i for i in musicfileslist]
    codecs.open( playlistname, encoding="utf-16le", mode="wb" ).write( "\r\n".join( musicfileslist ) )
    print "Wrote: ", playlistname


#------------------------------------------------------------------------------
def Playlist2Text( playlist, rootpath, newrootpath ):
    songslist = codecs.open( playlist, encoding="utf-16le", mode="rb" ).read()
    # make absolute paths to the song files
    songslist = songslist.replace( newrootpath, rootpath )
    songslist = songslist.replace( "\\", os.path.sep )
    # remove the watermark header
    p = PLAWatermark.split( "\n" )
    songslist = [ i for i in songslist.split("\r\n" ) if not i in p ]
    print "\n".join( songslist )


#------------------------------------------------------------------------------
def RootPathFix( musicfile, oldrootpath, newrootpath ):
    return musicfile.replace( oldrootpath, newrootpath )


#------------------------------------------------------------------------------
if __name__ == "__main__":
    usage = "usage: %prog [options] gather | playlist2text | file2playlist"
    parser = optparse.OptionParser( usage )
    parser.add_option("-p", "--playlistname",   dest="playlistname",   default=os.path.basename(os.getcwd())+".pla", help="The playlist filename",                                        metavar="PLAYLISTNAME")
    parser.add_option("-d", "--musicdirectory", dest="musicdirectory", default=os.getcwd(),                          help="The directory that contains the music files",                  metavar="MUSICDIRECTORY")
    parser.add_option("-r", "--rootpath",       dest="rootpath",       default="/media/Sansa e280/music",            help="The path to the music files on the mediap player, as mounted", metavar="MUSICDIRPATH")
    parser.add_option("-n", "--newroot",        dest="newroot",        default="HARP, MUSIC",                        help="The prefix that the playlist needs to each file",              metavar="NEWROOT")
    (options, args) = parser.parse_args()
    if "gather" in args:
        SongFilesListWritePlainText( options.playlistname, MusicFilesGet( options.musicdirectory) )
    elif "playlist2text" in args:
        Playlist2Text( options.playlistname, options.rootpath, options.newroot )
    elif "file2playlist" in args:
        SongFilesListWritePLA( options.playlistname, options.rootpath, options.newroot )
    else:
        parser.print_help()
        parser.error( "I don't know what to do" )
